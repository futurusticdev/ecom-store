// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  sizes       String[]
  inStock     Boolean  @default(true)
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        ProductTag[]
  OrderItem   OrderItem[]
  favoritedBy User[]    @relation("UserFavorites")
  reviews     Review[]

  @@index([categoryId])
  @@index([slug])
}

model Category {
  id          String    @id
  name        String
  description String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  products    ProductTag[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([name])
}

model ProductTag {
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String
  createdAt   DateTime  @default(now())

  @@id([productId, tagId])
  @@index([productId])
  @@index([tagId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String                  @db.Text
  phone                 String?                 // Added phone field
  accounts              Account[]
  sessions              Session[]
  orders                Order[]
  addresses             Address[]
  favorites             Product[]               @relation("UserFavorites")
  notificationSettings  NotificationPreference[]
  reviews               Review[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  status        OrderStatus    @default(PROCESSING)
  paymentStatus PaymentStatus  @default(PENDING)
  total         Float
  items         OrderItem[]
  discountId    String?
  discount      Discount?      @relation("OrderDiscount", fields: [discountId], references: [id])
  discountAmount Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([discountId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  type       AddressType
  name       String
  street     String
  apt        String?     // Apartment/Suite number
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum AddressType {
  SHIPPING
  BILLING
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  key       String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, key])
  @@index([userId])
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating      Int      @db.SmallInt
  title       String?
  comment     String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([rating])
}

model Discount {
  id              String           @id @default(cuid())
  code            String           @unique
  type            DiscountType
  value           Float
  minPurchase     Float            @default(0)
  maxUses         Int              @default(100)
  usedCount       Int              @default(0)
  expiryDate      DateTime?
  isActive        Boolean          @default(true)
  productCategory String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orders          Order[]          @relation("OrderDiscount")

  @@index([code])
  @@index([isActive])
  @@index([expiryDate])
}

enum DiscountType {
  PERCENTAGE
  FIXED
  SHIPPING
} 