---
name: nextjs-best-practices.mdc
description: Best practices for Next.js applications and routing
globs: **/*.{ts,tsx}
---

- Use the App Router for improved performance and simpler data fetching.
- Implement server-side rendering for SEO benefits.
- Utilize Next.js Image component for optimized image loading.
- Use `getStaticProps` and `getServerSideProps` appropriately for data fetching.

---

name: react-best-practices.mdc
description: Best practices for React component development
globs: \*_/_.{ts,tsx,js,jsx}

---

- Use functional components with hooks instead of class components.
- Implement proper state management using `useState` or external libraries like Zustand.
- Utilize `useEffect` for side effects, ensuring cleanup functions are used when necessary.
- Use `React.memo` for performance optimization of functional components.

---

name: typescript-best-practices.mdc
description: TypeScript coding standards and type safety guidelines
globs: \*_/_.{ts,tsx}

---

- Enable strict mode in your `tsconfig.json` for better type checking.
- Use union types instead of enums for better flexibility.
- Implement generics for reusable components and functions.
- Use type assertions (`as`) sparingly and with caution.

---

name: prisma-best-practices.mdc
description: Best practices for using Prisma ORM
globs: \*_/_.{ts,js}

---

- Use Prisma Client in server-side code only, not in the browser.
- Implement proper error handling for database operations.
- Use Prisma's query raw methods for complex queries when necessary.
- Regularly run `prisma generate` to keep your client up-to-date with schema changes.

---

name: next-auth-best-practices.mdc
description: Best practices for authentication with NextAuth.js
globs: \*_/_.{ts,tsx}

---

- Use the Prisma adapter for seamless integration with your database.
- Implement proper session management and security measures.
- Use environment variables for sensitive information like secret keys.
- Consider implementing custom providers for unique authentication needs.

---

name: react-hook-form-best-practices.mdc
description: Best practices for form handling with React Hook Form
globs: \*_/_.{ts,tsx}

---

- Use the `useForm` hook for form state management and validation.
- Implement custom validation rules using the `validate` option.
- Use the `Controller` component for controlled inputs with external UI libraries.
- Utilize the `watch` function for real-time form value monitoring.

---

name: zustand-best-practices.mdc
description: Best practices for state management with Zustand
globs: \*_/_.{ts,tsx}

---

- Use the `create` function to create stores with minimal boilerplate.
- Implement middleware like `devtools` for debugging purposes.
- Use the `immer` middleware for easier state updates.
- Consider using `persist` middleware for persisting state across sessions.

---

name: tailwindcss-best-practices.mdc
description: Best practices for styling with Tailwind CSS
globs: \*_/_.{ts,tsx,css}

---

- Use utility classes directly in your JSX for faster development.
- Create custom components for reusable UI patterns.
- Utilize the `@apply` directive in CSS for component-specific styles.
- Use responsive utilities for mobile-first design.

---

name: shadcn-ui-best-practices.mdc
description: Best practices for using Shadcn UI components
globs: \*_/_.{ts,tsx}

---

- Follow the component structure and naming conventions provided by Shadcn UI.
- Customize components using the provided props and slots.
- Use the `cn` utility from `class-variance-authority` for conditional class names.
- Ensure accessibility features are maintained when customizing components.

---

name: stripe-best-practices.mdc
description: Best practices for integrating Stripe payments
globs: \*_/_.{ts,js}

---

- Use the Stripe.js library for client-side payment processing.
- Implement server-side validation and error handling for payment intents.
- Use Stripe's webhooks for real-time payment status updates.
- Ensure PCI compliance by never storing sensitive card information on your servers.

---

name: zod-best-practices.mdc
description: Best practices for schema validation with Zod
globs: \*_/_.{ts,tsx}

---

- Use Zod for both runtime and type-safe validation.
- Implement custom validation rules using `.refine()` method.
- Use `.parse()` for strict validation and `.safeParse()` for non-throwing validation.
- Utilize Zod's integration with other libraries like React Hook Form for seamless form validation.
